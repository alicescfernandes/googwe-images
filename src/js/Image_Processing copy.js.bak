var myWorker = new Worker('js/worker.js');

myWorker.onmessage = function(e) {
    result.textContent = e.data;
    console.log('Message received from worker');
}

class Picture {

    constructor(px, py, w, h, impath, cat) {
        this.posx = px;
        this.posy = py;
        this.w = w;
        this.h = h;
        this.impath = impath;
        this.imgobj = new Image();
        this.imgobj.src = this.impath;
        this.original_w = this.imgobj.width;
        this.original_h = this.imgobj.height;
        this.category = cat;
        this.hist = [];
        this.color_moments = [];
        this.manhattanDist = [];
    
    }

    draw(cnv) {
        let ctx = cnv.getContext("2d");

        if (this.imgobj.complete) {
            ctx.drawImage(this.imgobj, this.posx, this.posy, this.w, this.h);
            console.log("Debug: N Time");

        } else {
            console.log("Debug: First Time");
            let self = this;
            this.imgobj.addEventListener('load', function () {
                ctx.drawImage(self.imgobj, self.posx, self.posy, self.w, self.h);
            }, false);
        }
    }

    //method to apply the algorithms to the image.
    //Because the image have to loaded from the server, the same strategy used in the method draw()
    //is used here to access the image pixels. We do not exactly when the image in loaded and computed.
    //For this reason the event "processed_picture" was created to alert the application (ISearchEngine)
    computation(cnv, histcol, colorMom, eventP2) {
        let  self = this;
        let ctx = cnv.getContext("2d");
        let eventP = eventP2;
        return new Promise(function(resolve,reject){
            if(self.imgobj.complete) {
                console.trace("Debug: N Time");
                ctx.drawImage(self.imgobj,0,0,self.imgobj.width,self.imgobj.height);
                let pixels = ctx.getImageData(0,0,self.imgobj.width,self.imgobj.height);
                //let pixels = Generate_Image(cnv);
                histcol.count_Pixels_async(pixels).then((data) => { 
                    self.hist = data
                    console.log(self.hist)
                })
    
                //self.build_Color_Rect(cnv, self.hist, histcol.redColor, histcol.greenColor, histcol.blueColor);
                //self.color_moments = colorMom.moments(self.imgobj,cnv);
                //resolve(self.color_moments)
                resolve([])

                document.dispatchEvent(eventP);

            } else {
                console.trace("Debug: First Time");
                self.imgobj.addEventListener('load',function() {
                    ctx.drawImage(self.imgobj,0,0,self.imgobj.width,self.imgobj.height);
                    let pixels = ctx.getImageData(0,0,self.imgobj.width,self.imgobj.height);
                    //let pixels = Generate_Image(cnv);
                    histcol.count_Pixels_async(pixels).then((data) => {
                        self.hist = data
                        console.log(self.hist)
                    })
                    //self.build_Color_Rect(cnv, self.hist, histcol.redColor, histcol.greenColor, histcol.blueColor);
                    //self.color_moments = colorMom.moments(self.imgobj,cnv);
                    resolve([])
                    document.dispatchEvent(eventP);
                },false);
            }

        // this method should be completed by the students
        })
        

    }

    //method used for debug. It shows the color and the correspondent number of pixels obtained by
    //the colorHistogram algorithm
    build_Color_Rect (cnv, hist, redColor, greenColor, blueColor) {
        let ctx = canvas.getContext("2d");
        let text_y = 390;
        let rect_y = 400;
        let hor_space = 80;

        ctx.font = "12px Arial";
        for (let c = 0; c < redColor.length; c++) {
            ctx.fillStyle = "rgb(" + redColor[c] + "," + greenColor[c] + "," + blueColor[c] + ")";
            ctx.fillRect(c * hor_space, rect_y, 50, 50);
            if (c === 8) {
                ctx.fillStyle = "black";
            }
            ctx.fillText(hist[c], c * hor_space, text_y);
        }
    }

    setPosition (px, py) {
        this.posx = px;
        this.posy = py;
    }

    mouseOver(mx, my) {
        if ((mx >= this.posx) && (mx <= (this.posx + this.w)) && (my >= this.posy) && (my <= (this.posy + this.h))) {
            return true;
        }
        return false;
    }

}

//Class to compute the Color Histogram algorithm. It receives the colors and computes the histogram
//through the method count_Pixels()
class ColorHistogram {
    constructor(redColor,greenColor,blueColor) {
        //Send this data to the worker
        this.redColor = redColor;
        this.greenColor = greenColor;
        this.blueColor = blueColor;
        this.limit = 4;

        //this.histogram = this.count_Pixels(this.pixels)
        // this method should be completed by the students

    }

    count_Pixels (pixels) {
        // this method should be completed by the students
        let colorDistances = Array(this.redColor.length);

        //Iterate on each 4 pixels
        for(let p = 0;p!=pixels.length;p+=4){
            let distances = this.calculateManhattan(pixels[p],pixels[p + 1],pixels[p+2]) //Returns a 12 item array

            //Check the 12 item array distances, and increment on the colors
            distances.forEach((distance,idx) => {
                if(distance > 3){
                    colorDistances[idx] = (colorDistances[idx] + 1) || 1
                }
            })
        }

        return colorDistances
        //For each group of four, calculate the manhattan distance for each color bar

    }

     count_Pixels_async (pixels) {
         let self = this;
        // this method should be completed by the students
         let colorDistances = Array(self.redColor.length);
         myWorker.postMessage({command:"calculate_manhattan",data:pixels.data});
         console.log('Message posted to worker');

        console.log("manhattan")
            //Iterate on each 4 pixels
             /*for(let p = 0; p != pixels.length; p += 4) {
                let distances = self.calculateManhattan(pixels[p],pixels[p + 1],pixels[p + 2]) //Returns a 12 item array

                //Check the 12 item array distances, and increment on the colors
                distances.forEach((distance,idx) => {
                    if(distance > 3) {
                        colorDistances[idx] = (colorDistances[idx] + 1) || 1
                    }
                })
            }

            //For each group of four, calculate the manhattan distance for each color bar
            resolve(colorDistances)*/
        
        

    }

    calculateManhattan(r,g,b){
        let distances = []
        for(let k = 0;k!=this.redColor.length;k++){
            let dRed = Math.abs( r  - this.redColor[k] )
            let dGreen = Math.abs( g - this.greenColor[k] )
            let dBlue = Math.abs( b - this.blueColor[k] )

            //Calculate Manhattan Distance
            distances.push( dRed + dGreen + dBlue) 
        }

        return distances

    }
}

//Class to compute the Color Moments algorithm. It computes the statistics moments
//through the method moments(). The moments are computed in the HSV color space. The method rgdToHsv is used
//to translate the pixel into the HSV color space
class ColorMoments {
    constructor() {
        this.h_block = 3;
        this.v_block = 3;
    }

    rgbToHsv(rc,gc,bc) {
        let r = rc / 255;
        let g = gc / 255;
        let b = bc / 255;

        let max = Math.max(r,g,b);
        let min = Math.min(r,g,b);
        let h = null,s = null,v = max;

        let dif = max - min;
        s = max == 0 ? 0 : dif / max;

        if(max == min) {
            h = 0;
        } else {
            switch(max) {
                case r:
                    h = (g - b) / dif + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / dif + 2;
                    break;
                case b:
                    h = (r - g) / dif + 4;
                    break;
            }
            h /= 6;
        }
        return [h,s,v];
    }

    moments(imgobj,cnv) {
        let wBlock = Math.floor(imgobj.width / this.h_block);
        let hBlock = Math.floor(imgobj.height / this.v_block);
        let n = wBlock * hBlock;
        let descriptor = [];
        var promesas = []
        let blockWidth = wBlock
        let blockHeight = hBlock
        var block = ""
        let self = this;
        
        let ctx = cnv.getContext("2d");
        ctx.drawImage(imgobj,0,0);

        for(let x = 0; x < 3; x++) {
            for(let y = 0; y < 3; y++) {
                block = ctx.getImageData(blockWidth * x,blockHeight * y,blockWidth,blockHeight);
                promesas.push(this.calculateMonents(block))
            }
        }

        ctx.clearRect(0,0,canvas.width,canvas.height);
        ctx.putImageData(block,0,0);

        return Promise.all(promesas);
    }

    calculateMonents(pixels) {
        var self = this;
            let medianHue = 0;
            let medianValue = 0;
            let medianSaturation = 0;
            let medianAlpha = 0;
            let pixelsPerColor = (pixels.data.length / 4);
            let varHue = 0;
            let varSaturation = 0;
            let varValue = 0;
            let varAlpha = 0;
            //let test = []
            for(let p = 0; p < pixels.data.length; p += 4) {
                var [h,s,v] = self.rgbToHsv(pixels.data[p],pixels.data[p + G],pixels.data[p + B]);

                medianHue = medianHue + h
                medianValue = medianValue + s
                medianSaturation = medianSaturation + v
                varHue = varHue + (h ** 2)
                varSaturation = varSaturation + (s ** 2)
                varValue = varValue + (v ** 2)
                //test.push(h)
            }
            medianHue = medianHue / (pixels.data.length / 4)
            medianValue = medianValue / (pixels.data.length / 4)
            medianSaturation = medianSaturation / (pixels.data.length / 4)

            varHue = (varHue - (pixelsPerColor * (medianHue ** 2))) / (pixelsPerColor - 1)
            varSaturation = (varSaturation - (pixelsPerColor * (medianSaturation ** 2))) / (pixelsPerColor - 1)
            varValue = (varValue - (pixelsPerColor * (medianValue ** 2))) / (pixelsPerColor - 1)
            //varAlpha = (varAlpha - (pixelsPerColor * (medianAlpha ** 2))) / (pixelsPerColor - 1)
            //console.log(pixelsPerColor)
            //resolve([medianHue,medianSaturation,medianValue,varHue,varSaturation,varValue])
            return [medianHue,medianSaturation,medianValue,varHue,varSaturation,varValue]
    }
}




var R = 0;
var G = 1;
var B = 2;
var ALPHA = 3;
//((57.0 ** 2+ 62.9** 2+ 63.5** 2+ 64.1** 2+ 66.1** 2+ 67.1** 2+ 73.6 ** 2) - (7 * (64.9**2))) / 6




